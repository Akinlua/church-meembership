generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    Int       @id @default(autoincrement())
  name                  String    @default("")
  username              String    @unique
  password              String
  role                  String    @default("user")
  passwordChangeRequired Boolean   @default(false) @map("password_change_required")
  createdAt             DateTime  @default(now()) @map("created_at")
  userLevelId           Int?      @map("user_level_id")
  userLevel             UserLevel? @relation(fields: [userLevelId], references: [id])

  @@map("users")
}

model UserLevel {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  users       User[]
  memberAccess Boolean @default(false) @map("member_access")
  visitorAccess Boolean @default(false) @map("visitor_access")
  vendorAccess Boolean @default(false) @map("vendor_access")
  groupAccess Boolean @default(false) @map("group_access")
  donationAccess Boolean @default(false) @map("donation_access")
  adminAccess Boolean @default(false) @map("admin_access")
  expenseAccess Boolean @default(false) @map("expense_access")
  chargesAccess Boolean @default(false) @map("charges_access")
  reportsAccess Boolean @default(false) @map("reports_access")
  depositAccess Boolean @default(false) @map("deposit_access")
  bankAccess Boolean @default(false) @map("bank_access")

  @@map("user_levels")
}

model Member {
  id             Int        @id @default(autoincrement())
  firstName      String     @map("first_name")
  middleName     String?    @map("middle_name")
  lastName       String     @map("last_name")
  memberNumber   String     @unique @map("member_number")
  isActive       Boolean    @default(true) @map("is_active")
  address        String?
  city           String?
  state          String?
  zipCode        String?    @map("zip_code")
  birthday       DateTime?
  gender         String?
  cellPhone      String?    @map("cell_phone")
  email          String?
  membershipDate DateTime?  @map("membership_date")
  baptismalDate  DateTime?  @map("baptismal_date")
  profileImage   String?    @map("profile_image")
  pastChurch     String?    @map("past_church")
  createdAt      DateTime   @default(now()) @map("created_at")
  donations      Donation[]
  groups         GroupMember[]

  @@map("members")
}

model Group {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime      @default(now()) @map("created_at")
  members     GroupMember[]

  @@map("groups")
}

model GroupMember {
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int      @map("group_id")
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  memberId  Int      @map("member_id")
  createdAt DateTime @default(now()) @map("created_at")

  @@id([groupId, memberId])
  @@map("group_members")
}

model Donation {
  id           Int      @id @default(autoincrement())
  member       Member   @relation(fields: [memberId], references: [id])
  memberId     Int      @map("member_id")
  amount       Decimal  @db.Decimal(10, 2)
  donationType String   @map("donation_type")
  donationDate DateTime @map("donation_date")
  notes        String?
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("donations")
  DonationType DonationType[]
}

model DonationType {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  donations   Donation[]
}

model Visitor {
  id             Int       @id @default(autoincrement())
  firstName      String    @map("first_name")
  lastName       String    @map("last_name")
  middleInitial  String?   @map("middle_initial")
  visitorNumber  String    @unique @map("visitor_number")
  address        String?
  city           String?
  state          String?
  zipCode        String?   @map("zip_code")
  cellPhone      String?   @map("cell_phone")
  email          String?
  homeChurch     String?   @map("home_church")
  profileImage   String?   @map("profile_image")
  visitDate      DateTime  @default(now()) @map("visit_date")
  createdAt      DateTime  @default(now()) @map("created_at")

  @@map("visitors")
}

model Vendor {
  id           Int      @id @default(autoincrement())
  lastName     String
  address      String?
  city         String?
  state        String?
  zipCode      String?
  phone        String?
  email        String?
  accountNumber String?
  vendorNumber String?  @unique
  // profileImage String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  Charge Charge[]
}

model ExpenseCategory {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Charge Charge[]
}

model Charge {
  id              Int             @id @default(autoincrement())
  amount          Decimal         @db.Decimal(10, 2)
  dueDate         DateTime
  isPaid          Boolean         @default(false)
  markedForPayment Boolean        @default(false)
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  vendorId        Int
  vendor          Vendor          @relation(fields: [vendorId], references: [id])
  expenseCategoryId Int
  expenseCategory ExpenseCategory @relation(fields: [expenseCategoryId], references: [id])
} 

model Bank {
  id             String     @id @default(cuid())
  name           String
  // branch         String?
  address        String?
  city           String?
  state          String?
  zipCode        String?
  routingNumber  String?
  accountNumber   String?
  contact  String?
  phone          String?
  // email          String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  deposits       Deposit[]
}

model Deposit {
  id            String   @id @default(cuid())
  bank          Bank     @relation(fields: [bankId], references: [id])
  bankId        String
  accountNumber String
  date          DateTime @default(now())
  cashAmount    Float    @default(0)
  checkAmount   Float    @default(0)
  totalAmount   Float
  // notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
} 